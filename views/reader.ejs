<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PDF Okuyucu</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js"></script>
    <style>
        body {
            margin: 0;
            padding: 0;
            background: #1a1a1a;
            color: white;
            overflow: hidden;
            height: 100vh;
        }
        .navbar {
            background-color: transparent !important;
            padding: 10px 0;
            position: fixed;
            width: 100%;
            top: 0;
            z-index: 1000;
        }
        .navbar-brand {
            color: white !important;
            display: flex;
            align-items: center;
            gap: 10px;
            opacity: 0.7;
            transition: opacity 0.3s;
        }
        .navbar-brand:hover {
            opacity: 1;
        }
        #pdfContainer {
            width: 100%;
            height: calc(100vh - 60px);
            margin-top: 60px;
            display: flex;
            justify-content: center;
            align-items: center;
            background: #1a1a1a;
        }
        .book-container {
            position: relative;
            width: 100%;
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            transform-style: preserve-3d;
        }
        .page-wrapper {
            position: relative;
            width: 100%;
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            transform-style: preserve-3d;
        }
        .page {
            position: relative;
            background: white;
            margin: auto;
            box-shadow: 0 0 30px rgba(0,0,0,0.4);
            border-radius: 8px;
            overflow: hidden;
            transform: translateZ(0);
            backface-visibility: hidden;
            perspective: 1000px;
            will-change: transform;
        }
        .page canvas {
            display: block;
            margin: auto;
            image-rendering: crisp-edges;
            image-rendering: -webkit-optimize-contrast;
            -webkit-font-smoothing: subpixel-antialiased;
            -moz-osx-font-smoothing: grayscale;
            transform: translateZ(0);
            backface-visibility: hidden;
        }
        .page-corner {
            position: absolute;
            bottom: 0;
            right: 0;
            width: 50px;
            height: 50px;
            background: linear-gradient(135deg, transparent 50%, rgba(0,0,0,0.1) 50%);
            transform-origin: bottom right;
            transition: all 0.3s ease;
            cursor: pointer;
            z-index: 3;
        }
        .page-corner:hover {
            transform: scale(1.2);
        }
        .page-info {
            position: fixed;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(0,0,0,0.5);
            color: white;
            padding: 8px 15px;
            border-radius: 20px;
            font-size: 14px;
            z-index: 1000;
            display: flex;
            align-items: center;
            gap: 10px;
            opacity: 0.7;
            transition: opacity 0.3s;
        }
        .page-info:hover {
            opacity: 1;
        }
        @media (max-width: 768px) {
            .page canvas {
                max-width: 100%;
                height: auto !important;
                transform: translateZ(0);
            }
            .page {
                width: 98%;
                margin: 5px auto;
                transform: translateZ(0);
            }
        }
        @media (min-width: 1200px) {
            .page {
                margin: 20px auto;
                transform: translateZ(0);
            }
        }
        .page-controls {
            position: fixed;
            bottom: 20px;
            right: 20px;
            display: flex;
            gap: 15px;
            z-index: 1000;
        }
        .nav-button {
            background: rgba(0, 0, 0, 0.7);
            border: 2px solid rgba(255, 255, 255, 0.2);
            color: white;
            width: 50px;
            height: 50px;
            border-radius: 50%;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 20px;
            backdrop-filter: blur(5px);
        }
        .nav-button:hover {
            background: rgba(0, 0, 0, 0.9);
            border-color: rgba(255, 255, 255, 0.4);
            transform: scale(1.1);
        }
        .nav-button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none;
        }
        .bookmark-button {
            position: fixed;
            top: 10px;
            right: 20px;
            background: rgba(0, 0, 0, 0.7);
            border: 2px solid rgba(255, 255, 255, 0.2);
            color: white;
            width: 45px;
            height: 45px;
            border-radius: 50%;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 18px;
            z-index: 1000;
            backdrop-filter: blur(5px);
        }
        .bookmark-button:hover {
            background: rgba(0, 0, 0, 0.9);
            border-color: rgba(255, 255, 255, 0.4);
            transform: scale(1.1);
        }
        .bookmark-button.active {
            color: #ffd700;
        }
        .bookmark-list {
            position: fixed;
            top: 80px;
            right: 20px;
            background: rgba(0,0,0,0.8);
            border-radius: 10px;
            padding: 10px;
            z-index: 999;
            backdrop-filter: blur(5px);
            display: none;
            max-width: 250px;
        }
        .bookmark-list.show {
            display: block;
        }
        .bookmark-item {
            color: white;
            padding: 8px 12px;
            cursor: pointer;
            border-radius: 5px;
            margin-bottom: 5px;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }
        .bookmark-item:hover {
            background: rgba(255,255,255,0.1);
        }
        .bookmark-item .delete-bookmark {
            color: #ff4444;
            opacity: 0;
            transition: opacity 0.3s ease;
        }
        .bookmark-item:hover .delete-bookmark {
            opacity: 1;
        }
        .notification {
            position: fixed;
            top: 20px;
            left: 20px;
            background: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 12px 20px;
            border-radius: 8px;
            display: flex;
            align-items: center;
            gap: 10px;
            transform: translateX(-120%);
            transition: transform 0.3s ease;
            z-index: 1000;
            backdrop-filter: blur(5px);
            border-left: 4px solid #4CAF50;
        }
        .notification.show {
            transform: translateX(0);
        }
        .saved-page-indicator {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(0, 0, 0, 0.9);
            color: #ffd700;
            padding: 20px 30px;
            border-radius: 15px;
            display: flex;
            align-items: center;
            gap: 15px;
            font-size: 18px;
            z-index: 1000;
            backdrop-filter: blur(5px);
            border: 2px solid #ffd700;
            opacity: 0;
            visibility: hidden;
            transition: all 0.5s ease;
        }
        .saved-page-indicator.show {
            opacity: 1;
            visibility: visible;
        }
        .saved-page-indicator i {
            font-size: 24px;
        }
    </style>
</head>
<body>
    <nav class="navbar">
        <div class="container">
            <a class="navbar-brand" href="/">
                <i class="fas fa-arrow-left"></i>
                KitApp
            </a>
        </div>
    </nav>

    <button class="bookmark-button" id="bookmarkBtn" title="Yer İmi Ekle">
        <i class="fas fa-bookmark"></i>
    </button>

    <div class="bookmark-list" id="bookmarkList"></div>

    <div id="pdfContainer">
        <div class="book-container">
            <div class="page-wrapper" id="pageWrapper"></div>
        </div>
    </div>

    <div class="page-info">
        <i class="fas fa-book-open"></i>
        <span><span id="currentPage">0</span> / <span id="totalPages">0</span></span>
    </div>

    <div class="page-controls">
        <button class="nav-button" id="prevBtn" onclick="prevPage()" title="Önceki Sayfa">
            <i class="fas fa-chevron-left"></i>
        </button>
        <button class="nav-button" id="nextBtn" onclick="nextPage()" title="Sonraki Sayfa">
            <i class="fas fa-chevron-right"></i>
        </button>
    </div>

    <div class="swipe-hint">
        <i class="fas fa-hand-point-right"></i>
        Səyfələr arasında keçid etmək üçün çevirin
    </div>

    <div class="notification" id="notification">
        <i class="fas fa-check-circle"></i>
        <span>Səhifə yadda saxlanıldı</span>
    </div>

    <script>
        pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js';

        let pdfDoc = null;
        let pageNum = 1;
        let pageRendering = false;
        let pageNumPending = null;
        let scale = 3.0;
        let startX = 0;
        let currentX = 0;
        const pageWrapper = document.getElementById('pageWrapper');
        const swipeHint = document.querySelector('.swipe-hint');

        // Kaydırma ipucunu 3 saniye sonra gizle
        setTimeout(() => {
            swipeHint.style.opacity = '0';
            setTimeout(() => {
                swipeHint.style.display = 'none';
            }, 500);
        }, 3000);

        // Ekran boyutuna göre ölçeği ayarla
        function calculateScale() {
            const vw = Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0);
            const vh = Math.max(document.documentElement.clientHeight || 0, window.innerHeight || 0);
            
            // Mobil cihazlar için
            if (vw <= 768) {
                return Math.min(vw / 600, vh / 800) * 2.5;
            }
            
            // Tablet için
            if (vw <= 1024) {
                return Math.min(vw / 800, vh / 1000) * 2.8;
            }
            
            // Masaüstü için ultra kalite
            return Math.min(vw / 1000, vh / 1400) * 3.0;
        }

        // Başlangıçta ve pencere boyutu değiştiğinde ölçeği güncelle
        function updateScale() {
            scale = calculateScale();
            if (pageNum) {
                renderPage(pageNum);
            }
        }

        window.addEventListener('resize', debounce(updateScale, 250));
        updateScale();

        // Debounce fonksiyonu
        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        async function loadPDF() {
            try {
                const loadingTask = pdfjsLib.getDocument('/books/<%= book %>');
                pdfDoc = await loadingTask.promise;
                document.getElementById('totalPages').textContent = pdfDoc.numPages;
                pageNum = 1;
                renderPage(pageNum);
            } catch (error) {
                console.error('PDF yüklənərkən xəta:', error);
                showNotification('PDF yüklənərkən xəta baş verdi');
            }
        }

        async function renderPage(num) {
            if (pageRendering) {
                pageNumPending = num;
                return;
            }

            pageRendering = true;
            
            try {
                const page = await pdfDoc.getPage(num);
                const viewport = page.getViewport({ scale });

                // Mevcut sayfayı temizle
                pageWrapper.innerHTML = '';

                // Yeni sayfa oluştur
                const pageDiv = document.createElement('div');
                pageDiv.className = 'page';
                
                const canvas = document.createElement('canvas');
                const context = canvas.getContext('2d', {
                    alpha: false,
                    antialias: true,
                    depth: true
                });

                // Ultra yüksek kalite için piksel oranını artır
                const pixelRatio = Math.max(window.devicePixelRatio || 1, 2);
                canvas.width = viewport.width * pixelRatio;
                canvas.height = viewport.height * pixelRatio;
                canvas.style.width = viewport.width + 'px';
                canvas.style.height = viewport.height + 'px';
                
                // Yüksek kaliteli ölçeklendirme
                context.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);
                context.imageSmoothingEnabled = true;
                context.imageSmoothingQuality = 'high';

                pageDiv.appendChild(canvas);
                pageWrapper.appendChild(pageDiv);

                // Ultra yüksek kaliteli render
                const renderContext = {
                    canvasContext: context,
                    viewport: viewport,
                    enableWebGL: true,
                    renderInteractiveForms: true,
                    antialiasing: true,
                    textLayerMode: 2,
                    renderTextLayer: true,
                    useSystemFonts: true
                };

                await page.render(renderContext).promise;

                document.getElementById('currentPage').textContent = num;

                if (pageNumPending !== null) {
                    renderPage(pageNumPending);
                    pageNumPending = null;
                }
            } catch (error) {
                console.error('Sayfa render hatası:', error);
            } finally {
                pageRendering = false;
            }
        }

        function prevPage() {
            if (pageNum <= 1) return;
            pageNum--;
            renderPage(pageNum);
        }

        function nextPage() {
            if (pageNum >= pdfDoc.numPages) return;
            pageNum++;
            renderPage(pageNum);
        }

        // Dokunma olayları
        pageWrapper.addEventListener('touchstart', (e) => {
            startX = e.touches[0].clientX;
            currentX = startX;
        });

        pageWrapper.addEventListener('touchmove', (e) => {
            e.preventDefault();
            currentX = e.touches[0].clientX;
            const diff = currentX - startX;
            const currentPage = pageWrapper.querySelector('.page');
            
            if (currentPage) {
                const progress = Math.min(Math.max(diff / window.innerWidth, -1), 1);
                const angle = progress * 180;
                currentPage.style.transform = `rotateY(${angle}deg)`;
            }
        });

        pageWrapper.addEventListener('touchend', () => {
            const diff = currentX - startX;
            const currentPage = pageWrapper.querySelector('.page');
            
            if (currentPage) {
                if (Math.abs(diff) > 50) {
                    if (diff > 0 && pageNum > 1) {
                        pageNum--;
                        renderPage(pageNum, 'prev');
                    } else if (diff < 0 && pageNum < pdfDoc.numPages) {
                        pageNum++;
                        renderPage(pageNum, 'next');
                    } else {
                        currentPage.style.transform = 'rotateY(0deg)';
                    }
                } else {
                    currentPage.style.transform = 'rotateY(0deg)';
                }
            }
        });

        // Klavye kontrolleri
        document.addEventListener('keydown', (e) => {
            if (e.key === 'ArrowLeft' && pageNum > 1) {
                pageNum--;
                renderPage(pageNum, 'prev');
            }
            if (e.key === 'ArrowRight' && pageNum < pdfDoc.numPages) {
                pageNum++;
                renderPage(pageNum, 'next');
            }
        });

        // Yer imleri için yeni kodlar
        const bookmarkBtn = document.getElementById('bookmarkBtn');
        const bookmarkList = document.getElementById('bookmarkList');
        const bookFileName = '<%= book %>'; // Kitap dosya adı
        
        // Yer imlerini localStorage'dan yükle
        let bookmarks = JSON.parse(localStorage.getItem(`bookmarks_${bookFileName}`) || '{}');

        // Yer imi butonunu güncelle
        function updateBookmarkButton() {
            if (bookmarks[pageNum]) {
                bookmarkBtn.classList.add('active');
            } else {
                bookmarkBtn.classList.remove('active');
            }
        }

        // Yer imlerini listele
        function renderBookmarks() {
            const sortedBookmarks = Object.entries(bookmarks)
                .sort(([a], [b]) => Number(a) - Number(b));
            
            bookmarkList.innerHTML = sortedBookmarks.length ? 
                sortedBookmarks.map(([page, note]) => `
                    <div class="bookmark-item" onclick="goToPage(${page})">
                        <span>${page}. sayfa${note ? ': ' + note : ''}</span>
                        <i class="fas fa-times delete-bookmark" onclick="deleteBookmark(event, ${page})" title="Yer İmini Sil"></i>
                    </div>
                `).join('') : 
                '<div class="bookmark-item">Yer imi yok</div>';
        }

        // Yer imi ekle/kaldır
        bookmarkBtn.addEventListener('click', () => {
            if (bookmarks[pageNum]) {
                delete bookmarks[pageNum];
                showNotification('Yer imi silindi');
            } else {
                const note = prompt('Bu sayfa için not eklemek ister misiniz? (İsteğe bağlı)');
                bookmarks[pageNum] = note || '';
                showNotification('Yer imi əlavə edildi');
            }
            localStorage.setItem(`bookmarks_${bookFileName}`, JSON.stringify(bookmarks));
            updateBookmarkButton();
            renderBookmarks();
        });

        // Yer imi listesini göster/gizle
        bookmarkBtn.addEventListener('contextmenu', (e) => {
            e.preventDefault();
            bookmarkList.classList.toggle('show');
        });

        // Belirli bir sayfaya git
        function goToPage(num) {
            pageNum = Number(num);
            renderPage(pageNum);
            bookmarkList.classList.remove('show');
        }

        // Yer imini sil
        function deleteBookmark(event, page) {
            event.stopPropagation();
            delete bookmarks[page];
            localStorage.setItem(`bookmarks_${bookFileName}`, JSON.stringify(bookmarks));
            updateBookmarkButton();
            renderBookmarks();
        }

        // Sayfa değiştiğinde yer imi butonunu güncelle
        const originalRenderPage = renderPage;
        renderPage = async function(num) {
            await originalRenderPage(num);
            updateBookmarkButton();
        };

        // Başlangıçta yer imlerini yükle
        renderBookmarks();
        
        // Sayfa dışına tıklandığında yer imi listesini kapat
        document.addEventListener('click', (e) => {
            if (!bookmarkBtn.contains(e.target) && !bookmarkList.contains(e.target)) {
                bookmarkList.classList.remove('show');
            }
        });

        // Bildirim gösterme fonksiyonu
        function showNotification(message) {
            const notification = document.getElementById('notification');
            notification.querySelector('span').textContent = message;
            notification.classList.add('show');
            setTimeout(() => {
                notification.classList.remove('show');
            }, 2000);
        }

        loadPDF();
    </script>
</body>
</html> 